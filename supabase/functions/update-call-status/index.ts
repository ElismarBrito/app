import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';

// CORS headers for preflight and response
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle preflight OPTIONS request
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Create Supabase client with auth context
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );

    // Get user from Authorization header
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    // Get request body
    const { 
      call_id, // A unique ID for the call attempt, generated by the native client
      campaign_id, 
      session_id, 
      device_id, 
      number, 
      status, 
      duration, // in seconds
      failure_reason 
    } = await req.json();

    // Validate required fields
    if (!call_id || !number || !status) {
      return new Response(JSON.stringify({ error: 'call_id, number, and status are required' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    // Prepare data for upsert
    const callData = {
      id: call_id,
      user_id: user.id,
      number,
      status,
      session_id: session_id || null,
      campaign_id: campaign_id || null,
      device_id: device_id || null,
      duration: duration || null,
      failure_reason: failure_reason || null,
    };

    // Upsert logic: Insert a new call record, or update it if it already exists.
    // We use the unique `call_id` from the client as the primary key.
    const { data, error } = await supabase
      .from('calls')
      .upsert(callData, { onConflict: 'id' })
      .select()
      .single();

    if (error) {
      console.error('Supabase error:', error);
      // If the error is due to a new status not being in the ENUM, provide a helpful message.
      if (error.message.includes('invalid input value for enum call_status_enum')) {
         return new Response(JSON.stringify({ error: `Invalid status: '${status}'. Ensure it's one of the allowed values in the 'call_status_enum' type.` }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
      }
      return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    return new Response(JSON.stringify(data), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });

  } catch (e) {
    console.error('Internal server error:', e);
    return new Response(JSON.stringify({ error: e.message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
  }
});
